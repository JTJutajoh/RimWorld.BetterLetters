using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Reflection;
using UnityEngine;
using Verse;

namespace DarkLog
{
    /// <summary>
    /// A utility class for my mods that helps automate some debug logging stuff.
    /// Mostly just a wrapper for Verse.Log.<br />
    /// Adds a prefix in format "[packageid]" to the start of each log.<br />
    /// Expects modInst to be set at mod initialization. If not set, defaults to the assembly name.<br />
    /// Also allows setting a PrefixColor.
    /// </summary>
    [StaticConstructorOnStartup]
    static class LogPrefixed
    {
        private static Verse.Mod? _modInstance;

        private static string PackageId => _modInstance?.Content.PackageIdPlayerFacing ??
                                           (Assembly.GetEntryAssembly()?.GetName().Name ?? "");
        private static string PrefixColor { get; set; } = "cyan";

        private static string PrefixedMessage(string message) => $"<color={PrefixColor}>[{PackageId}]</color> {message}";

        static LogPrefixed()
        {
        }

        public static void Initialize(Verse.Mod mod, string prefixColor = "cyan")
        {
            _modInstance = mod;
            prefixColor = prefixColor.ToLower();
#if DEBUG
            Error("DEBUG LOGSPAM ENABLED!!!");
            Warning("This is a debug build of the mod with trace logs included.");
#endif
        }
        
        public static void Error(string text)
        {
            Log.Error(PrefixedMessage(text));
        }

        public static void ErrorOnce(string text, String key)
        {
            Log.ErrorOnce(PrefixedMessage(text), key.GetHashCode());
        }

        public static void Warning(string text)
        {
            Log.Warning(PrefixedMessage(text));
        }

        /// <summary>
        /// Logs a formatted exception after it has been caught.
        /// </summary>
        /// <param name="e">The exception object</param>
        /// <param name="extraMessage">Optional extra string to add to the logged exception, for example to help identify
        /// the likely cause based on where it was caught.</param>
        /// <param name="once">If true, only the first instance of the exception will be logged,
        /// the hash will be generated by the stacktrace string.</param>
        public static void Exception(Exception e, string? extraMessage = null, bool once = false)
        {
            var message = $"Exception! Please send this error to the mod developer:\nException: {e.Message}\n{extraMessage + "\n" ?? ""}\nStacktrace: {e.StackTrace}";
            if (once)
            {
                var hash = e.StackTrace.GetHashCode();
                ErrorOnce(message, hash.ToString());
                WarningOnce("Exception silenced to prevent logspam. The error may still be occurring though, restarting the game is recommended.", hash.ToString());
            }
            else
            {
                Error(message);
            }
        }
        
        public static void WarningOnce(string text, String key)
        {
#if v1_4 || v1_5 || v1_6
            Log.WarningOnce(PrefixedMessage(text), key.GetHashCode());
#else
            Log.Warning(PrefixedMessage(text));
#endif
        }

        public static void Message(string text)
        {
            Log.Message(PrefixedMessage(text));
        }

        /// <summary>
        /// Sends a debug message, but only if project was built with the DEBUG constant defined.
        /// Use this for logspam.
        /// </summary>
        /// <param name="text">The message to log</param>
        /// <param name="warning">If true, sends as a yellow warning message for visibility.</param>
        public static void Trace(string text, bool warning = false)
        {
            // Non-Debug builds have no method body for this
#if DEBUG
            text = $"<color='yellow'>[TRACE]</color> {text}";
            if (warning)
                Warning(text);
            else
                Message(text);
#endif
            return;
        }
    }
}
